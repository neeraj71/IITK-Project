library(MASS)
library(rgl)
set.seed(20)

x1=c(.2,.22,.21,.23,.24,.2,.2,.65,.66,.11,.111,.112,.114,.115,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2,.2)
u<- seq(0.01,1,length.out = 200)
v<- seq(10,11,length.out=200)
v2=c(5,8,9,13,12,14,13,7,9,10,10.1,10.1,10.05,10.03,4,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4,4,4,4,4)
X=c(x1,u)
X=matrix(X)
noise <- rnorm(length(u),0,0.3)
M=basicMethod=matrix(0, nrow = length(X), ncol = 1)
y1=c(-800000000000,-95000000.1,-92400000,-87900000,-5400000.8,-650000.2,-91000000,-830000.9,-100.88,-2000000000000,-2000000000000.05,-2000000000000.06,-2000000000000.09,-2000000000000.02,-10000000000,-10000000000001,-100000002,-1000000003,-1000000004,-1000000005,-800000006,-1000000000007,-1000000000007,-1000000000007,-1000000000007,-1000000000007,-1000000000007)
y2=-100*(8*exp(v)*10*exp(10*u))+as.matrix(noise)
Fun=-100*(8*exp(v)*10*exp(10*u))
Y=c(y1,y2)
X2=c(v2,v)
X2=matrix(X2)

Final=basic=G=matrix(0, nrow = length(X), ncol = 3)
for(i in c(1:length(X))){
  for(j in c(1:3)){
    if(j==1){
      G[i,j]=X[i]}
    if(j==2)
      G[i,j]=X2[i]
    else if(j==3){
      G[i,j]=Y[i]}
  }}
sigma=800000000000
K=matrix(0, nrow = length(X), ncol = length(X))
W=matrix(0, nrow = length(X), ncol = 1)

for(j in c(1:length(X))){
  K[,j]=exp(-rowSums((sweep(G,2,G[j,],FUN="-"))^2)/sigma^2)
}

T=matrix(0, nrow = length(X), ncol = 1)
D=matrix(0, nrow = length(X), ncol = 1)
Z=matrix(0, nrow = length(X), ncol = 1)
for(n in c(1:length(X))){
  for(i in c(1:length(X))){
    T[i]=exp(-sum((G[i,]-G[n,])^2)/sigma^2)
    
    D[i]= sqrt(1+1-2*T[i])
    if(D[i]==0)
    {
      Z[i]=0
    }else{
      Z[i]=1/D[i]
    }
  }
  P=matrix(0, nrow = length(X), ncol = length(X))
  P=1+K-as.vector(T)
  
  for(j in c(1:length(X))){
    P[,j]=P[,j]-T[j]
  }
  
  W[n]=1-1/(length(X))*sqrt(t(Z)%*%P%*%Z)}
h=seq(.07,.08,1)
h=matrix(h)
for(j in c(1:length(h))){
  for(i in c(1:length(X))){
    temp=(sqrt((X[,1]-X[i,1])^2+(X2[,1]-X2[i,1])^2))/h[j,1]
    Ker=1/(sqrt(2*pi))*exp(-(temp^2)/2)
    num1=t(as.matrix(Ker))%*%Y
    denom1=sum(Ker)
    
    basicMethod[i,1]=num1/denom1
    
    num=t(as.matrix(Ker*W))%*%Y
    denom=(sum(Ker*W))
    M[i,1]=num/denom
  }
  
  for(i in c(1:length(X))){
    for(j in c(1:3)){
      if(j==1){
        basic[i,j]=X[i]}
      if(j==2)
        basic[i,j]=X2[i]
      else if(j==3){
        basic[i,j]=basicMethod[i]}
    }}
  
  
  for(i in c(1:length(X))){
    for(j in c(1:3)){
      if(j==1){
        Final[i,j]=X[i]}
      if(j==2)
        Final[i,j]=X2[i]
      else if(j==3){
        Final[i,j]=M[i]}
    }}
  Robust_dist=(sum((Fun-M[c((length(x1)+1):length(X))])^2))/length(Fun)
  Nadaraya_Watson_dist=(sum((Fun-basicMethod[c((length(x1)+1):length(X))])^2))/length(Fun)
  cat("Robust_distance ", Robust_dist,"\n")
  cat("Nadarya_Watson_distance",Nadaraya_Watson_dist,"\n")
  
  mfrow3d(nr=1,nc=2,sharedMouse = TRUE)
  plot3d(Final)
  plot3d(basic)
  rglwidget()
 
}



